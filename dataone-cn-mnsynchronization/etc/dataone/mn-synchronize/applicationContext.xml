<?xml version="1.0" encoding="UTF-8"?>
<beans default-init-method="init" xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

<!--
    Document   : applicationContext.xml
    Created on : July 23, 2010, 12:58 AM
    Author     : rwaltz
    Description:
        Purpose of the document follows.
-->
    <bean id="log4jInitialization"
     class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
     <property name="targetClass"
      value="org.springframework.util.Log4jConfigurer" />
       <property name="targetMethod" value="initLogging" />
        <property name="arguments">
        <list>
          <!--<value>classpath:org/dataone/cn/batch/proto/scheduler/log4j.properties</value> -->
           <value>file:/etc/dataone/mn-synchronize/log4j.properties</value>
         </list>
       </property>
      </bean>

    <bean id="log4jInitializationRedirectStdOutErr"
     class="org.dataone.cn.batch.proto.scheduler.utils.StdOutErrLog" />

   <bean id="properties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
      <property name="location">
         <value>file:/etc/dataone/mn-synchronize/synchronization.properties</value>
      </property>
   </bean>

    <bean id="mnNodeReference" class="org.dataone.service.types.NodeReference">
    	<property name="value" value="${synchronize.mnIdentifier}" />
    </bean>

<!-- the bean to be created via the factory bean -->

    <bean id="biBimBob" class="org.dataone.cn.jjigae.BiBimBob" />

    <!-- I really don't have to perform a proxy to the service, but i'm placing
         this here as an example as how to do it so that when aspects, advisors associated
         with a cutpoint of a crosscutting concern,
         need to be applied to clients (like auth and authnz), i have  little
         example of how to start -->
         
	<bean id="mnReplicationService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces" value="org.dataone.service.mn.MemberNodeReplication"/>
		<property name="target" ref="mnClient"/>
	</bean>
	<bean id="mnCrudService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces" value="org.dataone.service.mn.MemberNodeCrud"/>
		<property name="target" ref="mnClient"/>
	</bean>
    <bean id="mnClient" class="org.dataone.client.MNode">
        <constructor-arg type="org.dataone.service.types.NodeReference" ref="mnNodeReference" />
    </bean>
    
	<bean id="cnRegisteryService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces" value="org.dataone.service.cn.CoordinatingNodeRegister"/>
		<property name="target" ref="cnClient"/>
	</bean>
    <bean id="cnClient" class="org.dataone.client.CNode">
        <constructor-arg type="java.lang.String" value="${cnClient.rootUrl}" />
    </bean>    
    
	<bean id="cnAuthorizationService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces" value="org.dataone.service.cn.CoordinatingNodeAuthorization"/>
		<property name="target" ref="cnMetacatClient"/>
	</bean>    
	<bean id="cnAuthenticationService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces" value="org.dataone.service.cn.CoordinatingNodeAuthentication"/>
		<property name="target" ref="cnMetacatClient"/>
	</bean>
	<bean id="cnCrudService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces" value="org.dataone.service.cn.CoordinatingNodeCrud"/>
		<property name="target" ref="cnMetacatClient"/>
	</bean>
    <bean id="cnMetacatClient" class="org.dataone.client.CNode">
        <constructor-arg type="java.lang.String" value="${cnClient.knbRootUrl}" />
    </bean>

    <!-- this must be set before it can be used in ObjectListWriter -->
    <!-- currently set in the scheduler -->
    <bean id="cnToken"  class="org.dataone.service.types.AuthToken" />

    <bean id="publicToken"  class="org.dataone.service.types.AuthToken">
        <constructor-arg type="java.lang.String" value="public"/>
    </bean>
    
    
   <import resource="/scienceMetadataFormats.xml" />
   <import resource="/metadataPackagerService.xml" />
   <import resource="/mnHarvestService.xml" />


    <bean name="harvesterJob" class="org.dataone.cn.batch.proto.scheduler.jobs.MnHarvesterJob">
        <property name="bob" ref="biBimBob" />
        <property name="cnToken" ref="cnToken" />
        <property name="cnClient" ref="cnAuthenticationService" />
        <property name="queueBuilder" ref="objectListQueueBuilder" />
        <property name="queueProcessor" ref="objectListQueueProcessor" />
        <property name="queueWriter" ref="objectListQueueWriter" />
    </bean>

    <bean id="runMnHarvesterJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
      <property name="targetObject" ref="harvesterJob" />
      <property name="targetMethod" value="harvestMetadata" />
      <property name="concurrent" value="false" />
    </bean>

    <bean id="cronMnHarvesterBean" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="runMnHarvesterJob" />
        <!-- run at every hour of every day -->
        <property name="cronExpression" value="0 * * * * ?" />
    </bean>

    <bean name="eventPackagerJob" class="org.dataone.cn.batch.proto.scheduler.jobs.PackagerJob">
        <property name="logReader" ref="eventLogReader" />
        <property name="packageWriter" ref="metadataPackagerEventWriter" />
    </bean>

    <bean id="runEventPackagerJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
      <property name="targetObject" ref="eventPackagerJob" />
      <property name="targetMethod" value="packageMetadata" />
      <property name="concurrent" value="false" />
    </bean>

    <bean id="cronEventPackagerBean" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="runEventPackagerJob" />
        <!-- run at every hour of every day -->
        <property name="cronExpression" value="20 * * * * ?" />
    </bean>
   
       <bean name="replicationPackagerJob" class="org.dataone.cn.batch.proto.scheduler.jobs.PackagerJob">
        <property name="logReader" ref="replicationLogReader" />
        <property name="packageWriter" ref="metadataPackagerReplicationWriter" />
    </bean>

    <bean id="runReplicationPackagerJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
      <property name="targetObject" ref="replicationPackagerJob" />
      <property name="targetMethod" value="packageMetadata" />
      <property name="concurrent" value="false" />
    </bean>

    <bean id="cronReplicationPackagerBean" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="runReplicationPackagerJob" />
        <!-- run at every hour of every day -->
        <property name="cronExpression" value="40 * * * * ?" />
    </bean>


    <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="cronEventPackagerBean" />
                <ref bean="cronReplicationPackagerBean" />
                <ref bean="cronMnHarvesterBean" />
            </list>
        </property>
    </bean>
  
</beans>

